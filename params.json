{"name":"Paper Airplane","tagline":"(Test)","body":"| |\r\n|------|\r\n| _One Game A Month_, February 2014 |\r\n| _Platform_ | PC |\r\n| _Style_: 2D \"platformer\" |\r\n| _Engine_: Unity3D |\r\n| _Language_: C# |\r\n\r\nA test project of a game where you would play as a paper airplane that needs to navigate obstacles to reach the finish line. Heat sources push the paper plane up and air fans push the paper plane horizontally. When I had plans of making a full game, this was supposed to me similar to the old game _[Glider Pro](http://en.wikipedia.org/wiki/Glider_PRO)_ on Mac or Glider 4.0 as it was called when it was later ported to Windows.\r\n\r\n## Personal Goal\r\nThis was a test project I made to gain practice working on a 2D game, including using Unity 4.3's new 2D tools. I had not worked with 2D before this project and hope to work with it in future games, so a test project seemed like a good idea. I also used the project to play with some aspects Unity's physics that I had not worked with before. The paper airplane moves around using gravity and other forces pushing on it.\r\n\r\nThis was also my first real foray into using animations. I am not an artist, so this was particularly daunting. Drawing each frame of the animation was something I wanted to try even though I don't have much skill with art. But the art is only half of animation. I also wanted to learn about \"Mechanim\", what the Animator and Animation windows are, and how to make what I drew animate what I told it to.\r\n\r\n## What I Learned\r\n### Technical\r\n\r\nI was able to get hands-on with Unity's implementation of Sprites and Spritesheets. They were easy enough to understand and I didn't have any troubles working with them. The animation however, is a different story, and I have to say, I did not enjoy my time working on it. But I got it mostly working in the end. I learned how to make animations - how animation controllers work, what the Animator and Animation windows are in the editor, and how to communicate between scripts and the animation controllers. It seems like a powerful aspect of Unity. The dynamic animation of the airplane proved to be a challenge for me.\r\n\r\nI also got a little insight into Unity's frame lifetime cycle during the project. The \"pusher\" objects' animations fade the sprite opacity the further the sprite is from the pusher's base. This seemed fairly straightforward. However, I found the animation \"blinked\" to full opacity just as it looped back to the first frame. I figured out that the opacity change needed to go into LateUpdate instead of Update so that it wouldn't change back to full opacity before the animation looped. It seems this is because Update gets called before animations are looped. LateUpdate gets called after animations. The complimentary behavior of these pushers was pleasantly quick to get working. I was able to get the push force to change depending on how far the airplane was away from the the origin of the force. A simple calculation and it worked fine. Fine-tuning it to make it \"feel\" right took a while, but it behavior itself ended up working straight away.\r\n\r\nI also used this project to build a (very) small C# class that would output a bunch of debug information to the screen. I thought this was a good idea because I like having information available at a glance but always found it annoying trying to keep track of and synchronize spacing between the output lines between each script that needed to display something. This was accomplished by using a static method in the class that can be called by any script. The string it gets sent is added to a Key-Value data structure (Dictionary) and every frame the list gets iterated through. Spacing is calculated automatically based on the number of strings in the Dictionary. It's not a perfect solution however. I used the dictionary so that I could \"keep track of\" each message. I could change a message and it would get updated the next frame. However, to do this, I needed access to the message's key in the dictionary. I set it up that I sent a key as well as the message to the static method. So it's not completely hands-off. I still need to synchronize keys between scripts. This, however, was more acceptable to me than trying to keep track of and calculating spacing between displayed messages.\r\n\r\n### Artistic\r\n\r\nI drew the paper airplane used in the project. It turned out better than I expected, but that's no praise of its actual quality. Keeping perspective as the plane rotated through each frame took me a lot of trial and error. It's far from perfect, and I think one frame in particular is still pretty bad, but for having little experience and no skill, I was content with the end result.\r\n\r\n### Challenges\r\n\r\nThe animation in this project was a huge challenge for me. The art was new to me, as I just mentioned, but the technical side was even more challenging. I tried a few different things for animating the airplane, but never liked the way it turned out. I ended up leaving it set up that the animation changes frames based on the amount of force pushing on the plane. I liked the concept of this because it meant the animation would be different, and hopefully more natural looking, for different pushing forces. Communicating the for force between the script and the Animation Controller was a frustrating experience. It is likely because I don't know how everything works (and didn't find sufficient documentation online from Unity), but the Controller parameters - specifically the Triggers - didn't make much sense to me. And maybe it was just the way the flags were displayed in the editor, but it seemed they would get called at times I wasn't expecting and not get called when I was expecting. In any case, I got the animation mostly working so that the slower the plane turned around, the slower the animation would play. This is what I wanted.\r\n\r\nAnother challenge I came across that took me longer than it should have was the way the airplane behaved within an animating object with a box2D trigger. I had the plane being pushed as I expected when it entered the area of effect of the pusher objects. However, this came to a crashing halt once I tried animating the pushers! I learned that changing transforms in an animation (the scrolling bar sprites of the pushers) calls Box2D calculations again. So when the plane entered the scrolling pusher, the Box2D Colliders would call \"OnEnter\" every frame and \"OnStay\" would never get called! After a while of trying different things, it took me much longer than it should have that I should have the animation controller and the colliders as separate children of the (otherwise empty) parent object. While the collider was on the same object or a child of the object with the animation controller, the re-calculation problem occurred.\r\n\r\n## What I Would Change\r\nSince I left the project in such a raw and early state, I don't know that I can say that I would change anything about it. If I were more enthusiastic about the game, I would have wanted to do much more with the game. I can plans to make a complete game with different levels and look much like the old game Glider 4.0. I enjoyed the game on Windows when I was younger and wanted to re-create it as I was trying to learn 2D through a physics-based game project.\r\n\r\n## Tools and Resources\r\n* [Unity 4.3](http://www.unity3d.com/) - game engine / editor\r\n* C# - scripting language\r\n* MonoDevelop - IDE\r\n* [GIMP](http://www.gimp.org/) - image editor\r\n\r\n## Bugs Known At Release\r\nAside from being an incomplete test project, there is a bug that can occur despite the time I spent tweaking it. Sometimes the paper airplane's animation doesn't work properly. It can skip a phase of animation when turning from facing right to left. I don't know why this happens.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}